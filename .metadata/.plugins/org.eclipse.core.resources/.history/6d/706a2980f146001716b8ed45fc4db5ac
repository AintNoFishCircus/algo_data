package trees;
import java.util.ArrayList;

public class BinaryTree {

	private TreeNode head;
	private TreeNode nullNode;
	private TreeNode root;
	public static final int INORDER = 1;
	public static final int PREORDER = 2;
	public static final int POSTORDER = 3;
	public static final int LEVELORDER = 4;
	
	
	/**
	 * Erzeugt einen leeren Binärbaum mit einem Zeiger <code>head</code>
	 * und einer <code>nullNode</code>. Diese schließt den Baum ab. Alle Blätter des
	 * Baums müssen auf diese Node verweisen.
	 */
	public BinaryTree(){
		head = new TreeNode(null);
		nullNode = new TreeNode(null);
		head.setRight(nullNode);
		nullNode.setLeft(nullNode);
		nullNode.setRight(nullNode);
	
	}
	
	
	public TreeNode getRoot(){
		return head.getRight();
	}
	public boolean insert(Comparable c){
		TreeNode parent = head;
		TreeNode child = head.getRight();
		
		while(child != nullNode){
			parent = child;
			
			int comp = child.compareKeyTo(c);
			
			if(comp == 0){
				return false;
			}else if(comp < 0){
				child = child.getRight();
			}else{
				child = child.getLeft();
			}
		}
		
		TreeNode n = new TreeNode(c);
		n.setLeft(nullNode);
		n.setRight(nullNode);
		
		
		if(parent.compareKeyTo(c) < 0){
			parent.setRight(n);
			System.out.println("Inserted " + n.getKey() + " to right of node " + parent.getKey());
			return true;
		}else{
			parent.setLeft(n);
			System.out.println("Inserted " + n.getKey() + " to left of node " + parent.getKey());
			return true;
		}
	}
	
	public boolean find(Comparable c){
		TreeNode n = head.getRight();
		
		while(n != nullNode){
			int comp = n.compareKeyTo(c);

			if(comp == 0){
				return true;
			}else if(comp < 0){
				n = n.getRight();
			}else{
				n = n.getLeft();
			}
		}
		
		return false;
	}
	
	public Object findMinElementRekursiv(TreeNode n){
		
		if(n.getLeft() != nullNode){
			
			if(n.compareKeyTo((Comparable) n.getLeft().getKey()) > 0){
			 n = n.getLeft();
			
			}
			findMinElementRekursiv(n);
		}
		
		return n.getKey();
	}
	
	public Object findMinElementIterativ(){
		TreeNode n = head.getRight();
		
		while(n.getLeft() != nullNode){
			n = n.getLeft();
		}
		
		return n.getKey();
	}
	
	public Object findMaxElement(){
		TreeNode n = head.getRight();
		
		while(n.getRight() != nullNode){
			n = n.getRight();
		}
		
		return n.getKey();
	}
	
	public boolean remove(Comparable c){
		TreeNode parent = head;
		TreeNode node = head.getRight();
		TreeNode child = null;
		TreeNode temp = null;
		//Suche nach dem zu löschenden Knoten
		
		while(node != nullNode){
			int comp = node.compareKeyTo(c);
			
			if(comp == 0){
				break;
			}else{
				parent = node;
				if(comp < 0){
					node = node.getRight();
				}else{
					node = node.getLeft();
				}
			}
		}
			if (node == nullNode)
				return false;
			
			//Fall 1: Der zu löschende Knoten ist ein Blatt
			
			if (node.getLeft()== nullNode && node.getRight() == nullNode){
				child = nullNode;
			//Fall 2: Der zu löschende Knoten hat einen Nachfolger
			}else if(node.getLeft()== nullNode){
				child = node.getRight();
			}else if(node.getRight() == nullNode){
				child = node.getLeft();
			}else{
				child = node.getRight();
				temp = node;
				
				while(child.getLeft()!= nullNode){
					temp = child;
					child = child.getLeft();
				}
				child.setLeft(node.getLeft());
				if(temp != node){
					temp.setLeft(child.getRight());
					child.setRight(temp);
				}
			}
			
			if(parent.getLeft() == node){
				parent.setLeft(child);
			}else{
				parent.setRight(child);
			}
			
			node = null;
			return true;
		
	}
	
	/**
	 * Recursevily traverses the tree in Inorder priority which means first left, second root,
	 * third right. 
	 * @param n TreeNode to lookup 
	 */
	public void traverseInorder(TreeNode n){
		if(n!= nullNode){
			traverseInorder(n.getLeft());
			System.out.print(n.getKey() + " ");
			traverseInorder(n.getRight());
		}
		
	}
	
	/**
	 * Recursevily traverses the tree in Preorder priority which means first root, second left,
	 * third right.
	 * @param n
	 */
	public void traversePreorder(TreeNode n){
		if (n != nullNode){
			System.out.println(n.getKey());
			traversePreorder(n.getLeft());
			traversePreorder(n.getRight());
		}
	}
	/**
	 * Recursevily traverses the tree in Postorder priority which means first left, second right,
	 * third root.
	 * @param n
	 */
	public void traversePostorder(TreeNode n){
		if(n != nullNode){
			traversePostorder(n.getLeft());
			traversePostorder(n.getRight());
			System.out.println(n.getKey());
		}
	}
	
	public void traverseLevelorder(ArrayList<TreeNode> q){
		while(!q.isEmpty()){
			TreeNode n = q.remove(q.size()-1);
				
			
			if(n.getLeft()!= nullNode){
				q.add(0,n.getLeft());
			}
			if(n.getRight()!= nullNode){
				q.add(0,n.getRight());
			}
			
			System.out.print(" " + n.getKey() + " ");
			
		}
	}
	
	public void traverse(int priority){
		switch(priority){
		case INORDER:
			System.out.println("Inorder: ");
			traverseInorder(head.getRight());
			break;
		case PREORDER:
			traversePreorder(head.getRight());
			break;
		case POSTORDER:
			traversePostorder(head.getRight());
		case LEVELORDER:
			ArrayList<TreeNode> queue = new ArrayList<TreeNode>();
			queue.add(0,head.getRight());
			traverseLevelorder(queue);
			break;
		default:
			System.out.println("Please chose a valid priority");
		}
	}
	
}
